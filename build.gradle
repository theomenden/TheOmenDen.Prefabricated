plugins {
    id 'maven-publish'
    id 'fabric-loom' version '1.8.+'
    id 'idea'
    id 'com.modrinth.minotaur' version '2.+'
    id 'io.freefair.lombok' version '8.+'
    id "com.github.johnrengelman.shadow" version '8.1.+'
    id "nebula.release" version "19.0.+"
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {	name "Modrinth"; url "https://api.modrinth.com/maven"
        content { includeGroup "maven.modrinth"	}
    }
}

loom {
    accessWidenerPath = file("src/main/resources/prefabricated.accesswidener")
}

archivesBaseName = project.archives_base_name
group = project.maven_group

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.1:${project.parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}+1.20.1"
    modApi ("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: 'net.fabricmc.fabric.fabric-api')
    }
    modApi ("com.terraformersmc:modmenu:${project.modmenu_version}") {
        exclude(group: 'net.fabricmc.fabric.fabric-api')
    }

    implementation 'org.apache.commons:commons-text:1.11.0'
}

def projectVersion = project.version.toString();

processResources {
    inputs.property "version", projectVersion
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filesMatching("fabric.mod.json") {
        expand "version": projectVersion,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    if(targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if(JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
